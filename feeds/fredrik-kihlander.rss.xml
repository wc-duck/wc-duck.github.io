<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>The blog of Fredrik Kihlander - Fredrik Kihlander</title><link>http://kihlander.net/</link><description>The blog of Fredrik Kihlander</description><lastBuildDate>Tue, 15 May 2018 00:00:00 +0200</lastBuildDate><item><title>printf-based TOSTR on the stack</title><link>http://kihlander.net/printf-based-tostr-on-the-stack.html</link><description>&lt;p&gt;As I might have written before I like printf-style string-formating. It's imho the most convenient way to format strings and it can be really powerful if needed.
However something that can be a bit tedious is output:ing "composite" values such as a vec3 or quaternion as there will be …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Tue, 15 May 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:kihlander.net,2018-05-15:/printf-based-tostr-on-the-stack.html</guid><category>code</category><category>c++</category></item><item><title>A story about an unexpected ABI break</title><link>http://kihlander.net/a-story-about-an-unexpected-abi-break.html</link><description>&lt;p&gt;This is the story of an unexpected ABI break that I thought would be worth documenting.&lt;/p&gt;
&lt;p&gt;At Avalanche we use a small class wrapping 32bit hashes called CHashString, it is basically just a wrapper around
uint32_t and one should be able to treat it as a uint32_t in code except …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Wed, 15 Nov 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:kihlander.net,2017-11-15:/a-story-about-an-unexpected-abi-break.html</guid><category>code</category><category>c++</category><category>war-stories</category></item><item><title>Builtin resources and the resource-system</title><link>http://kihlander.net/builtin-resources-and-the-resource-system.html</link><description>&lt;p&gt;I have written, in passing, about the resource-system and VFS ( Virtual File System ) I use in my own game-engine. This time it will however not be "in passing"
but will dig down a bit deeper into one "feature" in it that I find kind of neat. I'm sure it has …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Mon, 07 Aug 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:kihlander.net,2017-08-07:/builtin-resources-and-the-resource-system.html</guid><category>code</category><category>c++</category><category>assets</category></item><item><title>utf8_lookup, a write up.</title><link>http://kihlander.net/utf8_lookup-a-write-up.html</link><description>&lt;p&gt;I saw this blog post a while ago &lt;a href="http://reedbeta.com/blog/programmers-intro-to-unicode/"&gt;A Programmer’s Introduction to Unicode&lt;/a&gt;, a really great write up that is a worth a
read for anyone interested in the subject! So go ahead and read that now even as it might not be super important for what I am …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Mon, 26 Jun 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:kihlander.net,2017-06-26:/utf8_lookup-a-write-up.html</guid><category>code</category><category>c++</category><category>utf8</category></item><item><title>Why I prefer inline forward-declares in C++</title><link>http://kihlander.net/why-i-prefer-inline-forward-declares-in-c.html</link><description>&lt;p&gt;Time for a short post on how I usually do the humble forward declare in C++. I guess this is not something new but it is something I usually do not see in
others code so it feels worth sharing.&lt;/p&gt;
&lt;p&gt;So lets start of with just defining what we are …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Mon, 14 Nov 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:kihlander.net,2016-11-14:/why-i-prefer-inline-forward-declares-in-c.html</guid><category>code</category><category>c++</category></item><item><title>Compile-time hashes in c++, im not convinced!</title><link>http://kihlander.net/compile-time-hashes-in-c-im-not-convinced.html</link><description>&lt;p&gt;I recently read a blogpost about &lt;a href="http://blog.demofox.org/2016/09/23/exploring-compile-time-hashing/"&gt;compile-time string-hashes and constexpr&lt;/a&gt; and I'm still not convinced and 
see no real reason to leave my old and true friend the script :)&lt;/p&gt;
&lt;p&gt;So first of lets look at the problem we want to solve. We want a way to do things like this …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Sat, 24 Sep 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:kihlander.net,2016-09-24:/compile-time-hashes-in-c-im-not-convinced.html</guid><category>code</category><category>c++</category></item><item><title>The command-line as a poor mans config files</title><link>http://kihlander.net/the-command-line-as-a-poor-mans-config-files.html</link><description>&lt;p&gt;I like command-line arguments as mentioned in an earlier &lt;a href="http://kihlander.net/registering-command-line-arguments.html"&gt;post&lt;/a&gt; about them. In this 
post I'll discuss a method to use them as simple config-files.&lt;/p&gt;
&lt;p&gt;Let's start of with a usage example from my own code. I have a meshviewer/particleviewer that is used for, you guessed it, viewing meshes …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:kihlander.net,2016-03-01:/the-command-line-as-a-poor-mans-config-files.html</guid><category>code</category><category>c++</category></item><item><title>Registering command line arguments</title><link>http://kihlander.net/registering-command-line-arguments.html</link><description>&lt;p&gt;I really like using command line arguments. I think that it is a flexible way to interact with and configure my games/engine.
It is for example easier to just add a &lt;code&gt;--log-verbose=resource&lt;/code&gt; to set all logging in the "resource"-domain to verbose or
&lt;code&gt;--memory-enable-stacktrace=render&lt;/code&gt; to enable save …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Sat, 27 Feb 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:kihlander.net,2016-02-27:/registering-command-line-arguments.html</guid><category>code</category><category>c++</category></item><item><title>About</title><link>http://kihlander.net/about.html</link><description>&lt;h3&gt;Who I am&lt;/h3&gt;
&lt;p&gt;I'm &lt;a href="http://kihlander.net"&gt;Fredrik Kihlander&lt;/a&gt;, engine programmer at &lt;a href="http://avalanchestudios.com"&gt;Avalanche Studios&lt;/a&gt; by day, father and avid amateur cook at night.&lt;/p&gt;
&lt;p&gt;The goal of this blog is to have somewhere to write down code-related things that might be of interest to others. Mainly C++ ( with a really light 
emphasis on the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Kihlander</dc:creator><pubDate>Wed, 27 Jan 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:kihlander.net,2016-01-27:/about.html</guid></item></channel></rss>