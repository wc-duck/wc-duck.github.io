<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Assets on What could possibly go wrong?</title>
		<link>https://kihlander.net/tags/assets/</link>
		<description>Recent content in Assets </description>
		<generator>Hugo -- gohugo.io</generator>
		
  		<language>en</language>
		
		<managingEditor>Page(/tags/assets) (Fredrik Kihlander)</managingEditor>
    	
  		<lastBuildDate>Mon, 07 Aug 2017 00:00:00 +0000</lastBuildDate>
		
		<atom:link href="/tags/assets/" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Compile Time Hashes in C - Revisied</title>
			<link>https://kihlander.net/post/compile-time-hashes-in-c-revisied/</link>
			<pubDate>Sat, 13 Apr 2024 00:00:00 +0000</pubDate>
			<guid>https://kihlander.net/post/compile-time-hashes-in-c-revisied/</guid>
			<description>Hashing strings in c++ at compile time has been possible since c++11 but is it worth doing? Me and a few colleagues was discussed this over a few beers and it reminded me that I have already written about it here (8 years ago&amp;hellip; ARGH I&amp;rsquo;m getting old!).
But a lot of time has passed since I wrote that&amp;hellip; and I didn&amp;rsquo;t make any measurements in that article! shame! SHAME I SAY!</description>
		</item>
      	
		<item>
			<title>Software I Like</title>
			<link>https://kihlander.net/post/software-i-like/</link>
			<pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
			<guid>https://kihlander.net/post/software-i-like/</guid>
			<description>I&amp;rsquo;m not the one that tinkers a lot with my dev-environment but there are some tools and software that I need and find that they help a lot day to day. And since I like to read about what others use I might as well share some tips on tools that you might also like.
My day-to-day OS of choice at home is xubuntu and at work Windows.
I hope to make this post a living document so it might be updated from time to time.</description>
		</item>
      	
		<item>
			<title>Looking at c for better closures in c&#43;&#43;</title>
			<link>https://kihlander.net/post/looking-at-c-for-better-closures-in-cpp/</link>
			<pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
			<guid>https://kihlander.net/post/looking-at-c-for-better-closures-in-cpp/</guid>
			<description>Note: before we begin, finding a name for this post was really hard!
In this post I&amp;rsquo;m going to touch on a c++-technique to handle callbacks that I have not seen written about before and that many of my colleagues hadn&amp;rsquo;t seen before either. Probably it&amp;rsquo;s not something new and some of you will probably just say &amp;ldquo;yeah yeah, nothing new under the sun&amp;rdquo; but it&amp;rsquo;s probably worth a few words!</description>
		</item>
      	
		<item>
			<title>Swapping memory and compiler optimizations</title>
			<link>https://kihlander.net/post/swapping-memory-and-compiler-optimizations/</link>
			<pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate>
			<guid>https://kihlander.net/post/swapping-memory-and-compiler-optimizations/</guid>
			<description>During my vacation for the holidays I thought that maybe I wanted some smaller project that you could fit in together with &amp;ldquo;family life&amp;rdquo; (not the easiest of endeavour!) and I got to think about some old code that I had laying about in my own little game-engine that I have thought about making public for a while. I thought it might be useful for someone else and maybe just doing some optimization work on it might be a fun little distraction!</description>
		</item>
      	
		<item>
			<title>A Zig Diary</title>
			<link>https://kihlander.net/post/a-zig-diary/</link>
			<pubDate>Sun, 08 Jan 2023 19:34:19 +0100</pubDate>
			<guid>https://kihlander.net/post/a-zig-diary/</guid>
			<description>As it turned out I happened to help out with fixing a space to host a zig meetup here in Stockholm at the place where I work. However I haven&amp;rsquo;t written a single line of zig in my life&amp;hellip; I felt that it might be worth doing something about that :D
If you don&amp;rsquo;t know, zig is a new systems programming language!
I have found zig quite intriguing for a while now but I haven&amp;rsquo;t had the time to look into it so this sounded like an as good excuse as any!</description>
		</item>
      	
		<item>
			<title>When memcpy() change!</title>
			<link>https://kihlander.net/post/when-memcpy-change/</link>
			<pubDate>Sun, 23 Oct 2022 09:38:33 +0200</pubDate>
			<guid>https://kihlander.net/post/when-memcpy-change/</guid>
			<description>To start of, yes, I know that this article touch undefined behavior and that all bets are off!
I am currently working on a bigger post on swapping memory that is THIS close to being done&amp;hellip; any day now (he has been saying the last year!).
However this topic popped up and I was wondering if it was worth making the other post longer or just make a small one about it.</description>
		</item>
      	
		<item>
			<title>Macros and Lambdas</title>
			<link>https://kihlander.net/post/macros-and-lambdas/</link>
			<pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate>
			<guid>https://kihlander.net/post/macros-and-lambdas/</guid>
			<description>Time for a short post on using lambdas to construct macros&amp;hellip; that was a sentence that will be able to trigger 2 camps in one go :D
Defer First of, using lambdas to implement a defer() is really neat, however others has already written about that so that I don&amp;rsquo;t have to!
A Defer Statement For C++11
Call once So from my end I&amp;rsquo;ll start of with a quick one for constructing a macro that only does something once, lets call it IS_FIRST_CALL().</description>
		</item>
      	
		<item>
			<title>When selecting a theme is your biggest problem!</title>
			<link>https://kihlander.net/post/when-selecting-a-theme-is-your-biggest-problem/</link>
			<pubDate>Sat, 23 Jul 2022 09:36:55 +0200</pubDate>
			<guid>https://kihlander.net/post/when-selecting-a-theme-is-your-biggest-problem/</guid>
			<description>I have been using pellican to generate and maintain my blog sinces its inception and it has been mainly fine. However after getting a new machine and starting to fiddle with a new post I started noticing things such as installation being far from optimal and it no longer generating a functioning site after updating pellican.
After an update all line-breaks in code-segments just got removed, did I configure something wrong, what to do to fix it?</description>
		</item>
      	
		<item>
			<title>&#34;ProtoThreads&#34; with a twist.</title>
			<link>https://kihlander.net/post/protothreads-with-a-twist/</link>
			<pubDate>Tue, 20 Nov 2018 00:00:00 +0000</pubDate>
			<guid>https://kihlander.net/post/protothreads-with-a-twist/</guid>
			<description>For a long time I&amp;rsquo;v been interested in running game-specific/entity-specific code in coroutines. Something like the following.
void some_game_object_behavior( entity ent, ... ) { pnt3 points[] = { {1,1,1}, {2,2,2}, {3,3,3}, {4,4,4} }; int pos = 0; while(entity_alive(ent)) { // move the entity to a position and yield coroutine while movement is ongoing. move_to(ent, points[pos % ARRAY_LENGTH(points)]); pos++; for(int i = 0; i &amp;lt; 4; ++i) { shoot_bullet(ent); wait_sec(ent, 2); // do nothing for 2 seconds and yield the coroutine for that duration.</description>
		</item>
      	
		<item>
			<title>printf-based TOSTR on the stack</title>
			<link>https://kihlander.net/post/printf-based-tostr-on-the-stack/</link>
			<pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
			<guid>https://kihlander.net/post/printf-based-tostr-on-the-stack/</guid>
			<description>As I might have written before I like printf-style string-formating. It&amp;rsquo;s imho the most convenient way to format strings and it can be really powerful if needed. However something that can be a bit tedious is output:ing &amp;ldquo;composite&amp;rdquo; values such as a vec3 or quaternion as there will be quite a bunch of repetition.
printf(&amp;#34;{ %.2f, %.2f, %.2f }&amp;#34;, vec.x, vec.x, vec.z); Doing this for multiple values really get verbose and its easy to make simple copy-paste-errors ( see above!</description>
		</item>
      	
	</channel>
</rss>
